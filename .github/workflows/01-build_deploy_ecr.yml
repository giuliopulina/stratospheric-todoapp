name: Build image and deploy to ECR

on:
  workflow_dispatch

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME : ${{ secrets.AWS_ROLE_TO_ASSUME }}

permissions:
  id-token: write

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'
        
    - name: NPM install
      working-directory: cdk
      run: npm install
      
    - name: Deploy ECR
      working-directory: cdk
      run: npm run ecr-registry:deploy
        
    - name: Build application
      working-directory: application
      run: mvn -B clean package --file pom.xml
      
    - name: Create Docker image tag
      id: dockerImageTag
      run: echo "tag=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      working-directory: application
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: stratospheric-app
        DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
      run: |
        docker build -t stratospheric-app .
        docker tag stratospheric-app $ECR_REGISTRY/$ECR_REPOSITORY:${DOCKER_IMAGE_TAG}
        docker tag stratospheric-app $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${DOCKER_IMAGE_TAG}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Deploy app
      working-directory: cdk
      run: npm run app:deploy -- -c dockerImageTag=${{ steps.dockerImageTag.outputs.tag }}